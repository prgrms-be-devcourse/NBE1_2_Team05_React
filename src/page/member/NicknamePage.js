import React, { useState } from 'react';import Button from '@mui/material/Button';import CssBaseline from '@mui/material/CssBaseline';import TextField from '@mui/material/TextField';import Link from '@mui/material/Link';import Grid from '@mui/material/Grid';import Box from '@mui/material/Box';import Typography from '@mui/material/Typography';import Container from '@mui/material/Container';import { createTheme, ThemeProvider } from '@mui/material/styles';import SomunIcon from "../../assets/image/somun_icon.png";import { checkName, socialUserRegister } from "../../api/userApi";import { useNavigate } from "react-router-dom";import Snackbar from '@mui/material/Snackbar';import MuiAlert from '@mui/material/Alert';import { useAuth } from "../../context/AuthContext"; // AuthContext 사용function Copyright(props) {    return (        <Typography variant="body2" color="text.secondary" align="center" {...props}>            {'Copyright © '}            Social Culture            {new Date().getFullYear()}            {'.'}        </Typography>    );}const theme = createTheme();const Alert = React.forwardRef(function Alert(props, ref) {    return <MuiAlert elevation={6} ref={ref} variant="filled" {...props} />;});export default function NicknamePage() {    const [name, setName] = useState('');    const [nameError, setNameError] = useState('');    // Snackbar 상태 관리    const [openSnackbar, setOpenSnackbar] = useState(false);    const [snackbarMessage, setSnackbarMessage] = useState('');    const [snackbarSeverity, setSnackbarSeverity] = useState('success');    const navigate = useNavigate();    const { login } = useAuth();  // login 함수 가져오기    const validateName = (name) => {        const nameRegex = /^(?=.{3,10}$)(?!.*[ㄱ-ㅎㅏ-ㅣ])[a-zA-Z0-9가-힣]*$/;        return nameRegex.test(name);    };    const handleSnackbarClose = () => {        setOpenSnackbar(false);    };    const handleSubmit = async (event) => {        event.preventDefault();        let isValid = true;        const data = new FormData(event.currentTarget);        const enteredName = data.get('name');        // 닉네임 검증        if (!validateName(enteredName)) {            setNameError("닉네임은 3자 이상 10자 이하의 한글, 영문, 숫자만 가능합니다.");            isValid = false;        } else {            try {                const result = await checkName(enteredName);                if (result.isInvalidFormat) {                    setNameError("닉네임 형식이 잘못되었습니다.");                } else if (result.isDuplicate) {                    setNameError("닉네임이 중복되었습니다.");                } else {                    setNameError("");                }            } catch (error) {                setNameError("닉네임 중복 확인에 실패했습니다. 다시 시도해주세요.");            }        }        // 닉네임 유효성 검사 이후 소셜 사용자 회원가입 진행        if (isValid) {            try {                const result = await socialUserRegister(enteredName);                if (result.registerCheck) {                    login(enteredName);                    setSnackbarSeverity('success');                    setSnackbarMessage("가입 성공! 로그인 되었습니다.");                    setOpenSnackbar(true);                    // 일정 시간 후 메인 페이지로 리다이렉트                    setTimeout(() => {                        navigate('/');                    }, 1000);                } else {                    setSnackbarSeverity('error');                    setSnackbarMessage(result.message);                    setOpenSnackbar(true);                }            } catch (error) {                setSnackbarSeverity('error');                setSnackbarMessage("회원가입 중 오류가 발생했습니다. 다시 시도해주세요.");                setOpenSnackbar(true);            }        }    };    return (        <ThemeProvider theme={theme}>            <Container component="main" maxWidth="xs">                <CssBaseline />                <Box                    sx={{                        marginTop: 8,                        display: 'flex',                        flexDirection: 'column',                        alignItems: 'center',                    }}                >                    <img src={SomunIcon}                         alt="소문 로고"                         style={{width: '40%', height: '40%', marginBottom: '10px'}}                    />                    <Box component="form" noValidate onSubmit={handleSubmit} sx={{mt: 3, width: '100%'}}>                        <Grid container spacing={2}>                            <Grid item xs={12}>                                <TextField                                    autoComplete="given-name"                                    name="name"                                    required                                    fullWidth                                    id="name"                                    label="닉네임을 정해주세요"                                    value={name}                                    onChange={(e) => setName(e.target.value)}                                    error={!!nameError}                                    helperText={nameError}                                />                            </Grid>                        </Grid>                        <Box                            sx={{                                display: 'flex',                                flexDirection: 'column',                                alignItems: 'center',                                gap: 2,                                width: '100%'                            }}                        >                            <Button                                type="submit"                                fullWidth                                variant="contained"                                sx={{mt: 3, mb: 0}}                            >                                회원 가입                            </Button>                        </Box>                        <Grid container justifyContent="flex-end" sx={{ mt: 2 }}>                            <Grid item>                                <Link href="/signin" variant="body2">                                    이미 계정이 있으신가요? 로그인                                </Link>                            </Grid>                        </Grid>                    </Box>                </Box>                <Copyright sx={{mt: 5}}/>                {/* Snackbar 컴포넌트 추가 */}                <Snackbar open={openSnackbar} autoHideDuration={6000} onClose={handleSnackbarClose}>                    <Alert onClose={handleSnackbarClose} severity={snackbarSeverity}>                        {snackbarMessage}                    </Alert>                </Snackbar>            </Container>        </ThemeProvider>    );}